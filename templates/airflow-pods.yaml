apiVersion: v1
kind: ServiceAccount
metadata:
  name: airflow-executor
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: airflow-executor-role
rules:
  - apiGroups: [""]
    resources: ["pods", "namespaces"]
    verbs: ["get", "watch", "list", "create", "update", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: airflow-executor
roleRef:
  kind: ClusterRole
  name: airflow-executor-role
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: airflow-executor
    namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: airflow-webserver
  labels:
    app: airflow-webserver
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 8080
      name: airflow-web
  selector:
    app: airflow-webserver
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-webserver
  labels:
    app: airflow-webserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-webserver
  template:
    metadata:
      labels:
        app: airflow-webserver
    spec:
      containers:
        - name: airflow-webserver
          image: "hahafree12/dwfs-airflow"
          ports:
            - containerPort: 8080
              name: airflow-web
          env:
            - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
              valueFrom:
                secretKeyRef:
                  name: airflow-secrets
                  key: database_url
            - name: AIRFLOW__CORE__EXECUTOR
              value: {{ .Values.airflow_config.executor }}
          command: ["airflow"]
          args: ["webserver"]
          volumeMounts:
            - mountPath: "/dags"
              name: airflow-dags
            - mountPath: "/airflow/logs"
              name: airflow-logs
      volumes:
        - name: airflow-dags
          persistentVolumeClaim:
            claimName: airflow-dags
        - name: airflow-logs
          persistentVolumeClaim:
            claimName: airflow-logs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-scheduler
  labels:
    app: airflow-scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-scheduler
  template:
    metadata:
      labels:
        app: airflow-scheduler
    spec:
      serviceAccount: airflow-executor
      serviceAccountName: airflow-executor
      containers:
        - name: airflow-scheduler
          image: "hahafree12/dwfs-airflow"
          env:
            - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
              valueFrom:
                secretKeyRef:
                  name: airflow-secrets
                  key: database_url
            - name: AIRFLOW__CORE__EXECUTOR
              value: {{ .Values.airflow_config.executor }}
          command: ["airflow"]
          args: ["scheduler"]
          volumeMounts:
            - mountPath: "/dags"
              name: airflow-dags
            - mountPath: "/airflow/logs"
              name: airflow-logs
      volumes:
        - name: airflow-dags
          persistentVolumeClaim:
            claimName: airflow-dags
        - name: airflow-logs
          persistentVolumeClaim:
            claimName: airflow-logs
---
{{ if eq .Values.cluster_config.use_nfs true }}
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-dags
spec:
  capacity:
    storage: 10Gi
  accessModes: ["ReadWriteMany"]
  nfs:
    server: {{ .Values.nfs.dags_server }}
    path: {{ .Values.nfs.dags_path | quote }}
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-logs
spec:
  capacity:
    storage: 10Gi
  accessModes: ["ReadWriteMany"]
  nfs:
    server: {{ .Values.nfs.logs_server }}
    path: {{ .Values.nfs.logs_path | quote }}
---
{{ end }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: airflow-dags
spec:
  {{- if eq .Values.cluster_config.use_nfs true }}
  accessModes: ["ReadWriteMany"]
  # To avoid using default storage class for block storage
  storageClassName: ""
  {{- else }}
  accessModes: ["ReadWriteOnce"]
  {{- end }}
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: airflow-logs
spec:
  {{- if eq .Values.cluster_config.use_nfs true }}
  accessModes: ["ReadWriteMany"]
  # To avoid using default storage class for block storage
  storageClassName: ""
  {{- else }}
  accessModes: ["ReadWriteOnce"]
  {{- end }}
  resources:
    requests:
      storage: 10Gi